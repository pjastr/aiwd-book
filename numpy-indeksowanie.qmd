# Indeksowanie, "krojenie"

```{python}
#| echo: true
import numpy as np

a = np.array([2, 5, -2, 4, -7, 8, 9, 11, -23, -4, -7, 16, 1])
print("1:", a[5]) # <1>
print("2:", a[-2]) # <2>
print("3:", a[3:6]) # <3>
print("4:", a[:]) # <4>
print("5:", a[0:-1]) # <5>
print("6:", a[:5]) # <6>

```

1. Dostęp do elementu o indeksie 5.
2. Dostęp do elementu drugiego od tyłu.
3. Dostęp do elementów o indeksach od 3 do 5 (włącznie) - zasada przedziałów lewostronnnie domkniętnych, prawostronnie otwartych.
4. Dostęp do wszystkich elementów.
5. Dostęp do wszystkich elementów z wyłączeniem ostatniego.
6. Dostęp od początku do elementu o indeksie 4.

```{python}
#| echo: true
import numpy as np

print("1:", a[4:]) # <1>
print("2:", a[4:-1]) # <2>
print("3:", a[4:10:2])  # <3>
print("4:", a[::-1]) # <4>
print("5:", a[::2]) # <5>
print("6:", a[::-2]) # <6>
```
1. Dostęp do elementów od indeksu 4 do końca.
2. Dostęp do elementów od indeksu 4 do końca bez ostatniego.
3. Dostęp do elementów o indeksach stanowiących ciąg arytmetyczny od 4 do 10 (z czówrką, ale bez dziesiątki) z krokiem równym 2
4. Dostęp do elementów od tyłu do początku.
5. Dostęp do elementów o indeksach parzystych od początku.
6. Dostęp do elementów o indeksach "nieparzystych ujemnych" od początku.


```{python}
#| echo: true
import numpy as np

a = np.array([[3, 4, 5], [-3, 4, 8], [3, 2, 9]])
b = a[:2, 1:]
print(b)
print(np.shape(b))
c = a[1]
print(c)
print(np.shape(c))
d = a[1, :]
print(d)
print(np.shape(d))
```

```{python}
#| echo: true
import numpy as np

a = np.array([[3, 4, 5], [-3, 4, 8], [3, 2, 9]])
e = a[1:2, :]
print(e)
print(np.shape(e))
f = a[:, :2]
print(f)
print(np.shape(f))
g = a[1, :2]
print(g)
print(np.shape(g))
h = a[1:2, :2]
print(h)
print(np.shape(h))

```

**Uwaga - takie "krojenie" to tzw "widok".

```{python}
#| echo: true
import numpy as np

a = np.array([[3, 4, 5], [-3, 4, 8], [3, 2, 9]])
b = a[1:2, 1:]
print(b)
a[1][1] = 9
print(a)
print(b)
b[0][0] = -11
print(a)
print(b)

```

Naprawa:
  
```{python}
#| echo: true
import numpy as np

a = np.array([[3, 4, 5], [-3, 4, 8], [3, 2, 9]])
b = a[1:2, 1:].copy()
print(b)
a[1][1] = 9
print(a)
print(b)
b[0][0] = -11
print(a)
print(b)

```

Indeksowanie logiczne (fancy indexing, maski boolowskie)

```{python}
#| echo: true
import numpy as np

a = np.array([2, 5, -2, 4, -7, 8, 9, 11, -23, -4, -7, 8, 1])
b = a[np.array([1, 3, 7])]
print(b)
c = a[[1, 3, 7]]
print(c)

```

```{python}
#| echo: true
import numpy as np

a = np.array([2, 5, -2, 4, -7, 8, 9, 11, -23, -4, -7, 8, 1])
b = a > 0
print(b)
c = a[a > 0]
print(c)
d = a[(a > 5) & (a%2 !=0)] # znak & odpowiada za AND
print(d)
e = a[(a > 5) | (a%2 !=0)] # znak | odpowiada za OR
print(e)
f = a[(a > 5) ^ (a%2 !=0)] # znak ^ odpowiada za XOR
print(f)
g = a[~(a > 0)]
print(g)
```

```{python}
#| echo: true
import numpy as np

a = np.array([2, 5, -2, 4, -7, 8, 9, 11, -23, -4, -7, 8, 1])
b = a[a > 0]
print(b)
b[0] = -5
print(a)
print(b)
a[1] = 20
print(a)
print(b)

```

**Ćwiczenia:** (`ex4.py`)

1. Rozważ jednowymiarową tablicę  
   $$A = \begin{bmatrix}10 & 20 & 30 & 40 & 50\end{bmatrix}.$$  
   Napisz polecenie , które zwróci trzeci element tablicy. Następnie spróbuj pobrać przedział od drugiego do czwartego elementu włącznie.

2. Dla tej samej tablicy  
   $$A = \begin{bmatrix}10 & 20 & 30 & 40 & 50\end{bmatrix},$$  
   użyj "fancy indexing", aby wybrać elementy o indeksach `[0, 2, 4]`. Spróbuj także wykorzystać negatywne indeksy, aby wybrać ostatni i przedostatni element w jednej operacji.

3. Rozważ dwuwymiarową tablicę  
   $$B = \begin{bmatrix}1 & 2 & 3 \\ 4 & 5 & 6 \\ 7 & 8 & 9\end{bmatrix}.$$  
   Napisz polecenie, które zwróci drugi wiersz (jako tablicę jednowymiarową). Następnie pobierz cały pierwszy wiersz oraz dwie pierwsze kolumny.

4. Dla tablicy  
   $$B = \begin{bmatrix}1 & 2 & 3 \\ 4 & 5 & 6 \\ 7 & 8 & 9\end{bmatrix},$$  
   użyj "fancy indexing", aby wybrać elementy $(B_{1,1}, B_{0,2}, B_{2,0})$ za pomocą list indeksów w `numpy`. Otrzymaj wynik w postaci tablicy jednowymiarowej `[5, 3, 7]`.

5. Rozważ tablicę  
   $$C = \begin{bmatrix}10 & 20 & 30 & 40 \\ 50 & 60 & 70 & 80\end{bmatrix}.$$  
   Napisz polecenie, które zwróci wszystkie elementy drugiego wiersza oprócz ostatniego. Następnie pobierz co drugi element z pierwszego wiersza.

6. Dla tablicy  
   $$C = \begin{bmatrix}10 & 20 & 30 & 40 \\ 50 & 60 & 70 & 80\end{bmatrix},$$  
   użyj "fancy indexing", aby pobrać elementy pierwszego wiersza w kolejności `[30, 10, 40]` korzystając z tablicy indeksów np. `[2, 0, 3]`. Następnie zastosuj "fancy indexing" do drugiego wiersza, aby uzyskać `[80, 50]`.

7. Rozważ jednowymiarową tablicę  
   $$D = \begin{bmatrix}5 & 10 & 15 & 20 & 25 & 30\end{bmatrix}.$$  
   Za pomocą indeksowania wytnij ostatnie trzy elementy. Następnie pobierz wszystkie elementy o parzystych indeksach.

8. Dla tablicy  
   $$D = \begin{bmatrix}5 & 10 & 15 & 20 & 25 & 30\end{bmatrix},$$  
   użyj "fancy indexing" za pomocą maski boolowskiej (utwórz maskę wybierającą elementy większe niż 15) i otrzymaj odpowiednio przefiltrowaną tablicę. Następnie zastosuj tę maskę do pobrania konkretnych elementów.

9. Rozważ tablicę dwuwymiarową  
   $$E = \begin{bmatrix}2 & 4 & 6 \\ 8 & 10 & 12 \\ 14 & 16 & 18\end{bmatrix}.$$  
   Za pomocą indeksowania wybierz środkowy wiersz i wszystkie kolumny oprócz ostatniej. Następnie wybierz ostatni wiersz i ostatnią kolumnę.

10. Dla tablicy  
    $$E = \begin{bmatrix}2 & 4 & 6 \\ 8 & 10 & 12 \\ 14 & 16 & 18\end{bmatrix},$$  
    użyj "fancy indexing", aby w jednej operacji pobrać elementy $(E_{0,2}, E_{2,1})$ i ułożyć je w nowej tablicy. Spróbuj także stworzyć maskę boolowską wybierającą elementy większe niż 10 i pobrać wybrane wartości.
